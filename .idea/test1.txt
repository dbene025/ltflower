import streamlit as st
import requests
import pandas as pd
import numpy as np
from webcolors import hex_to_rgb, rgb_to_hex

# Function to fetch plants by color from Perenual API
def get_plants_by_color(api_key, color, sun_level, water_frequency, growth_rate, propagation, leaf_color, maintenance, drought_tolerant, salt_tolerant):
    url = (f'https://perenual.com/api/species-list?key={api_key}&flower_color={color}'
           f'&sun_level={sun_level}&water_frequency={water_frequency}'
           f'&growth_rate={growth_rate}&propagation={propagation}'
           f'&leaf_color={leaf_color}&maintenance={maintenance}&drought_tolerant={drought_tolerant}'
           f'&salt_tolerant={salt_tolerant}')
    response = requests.get(url)
    return response.json()

# Function to convert hex to rgb
def hex_to_rgb_tuple(hex_color):
    return hex_to_rgb(hex_color)

# Function to find complementary color
def get_complementary_color(rgb_color):
    comp_rgb = tuple(255 - val for val in rgb_color)
    return rgb_to_hex(comp_rgb)

# Function to get analogous colors
def get_analogous_colors(rgb_color):
    shift = 30
    analogous1 = tuple((val + shift) % 256 for val in rgb_color)
    analogous2 = tuple((val - shift) % 256 for val in rgb_color)
    return [rgb_to_hex(analogous1), rgb_to_hex(analogous2)]

# Custom CSS for narrowing the select boxes
st.markdown(
    """
    <style>
    .stSelectbox, .stRadio, .stSlider {
        max-width: 300px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Streamlit app
st.title('Flora Advisor: Professional Plant Matchmaking')

st.markdown("""
    Welcome to Flora Advisor! Our goal is to help you find the perfect plants to complement your garden. 
    Please provide the details below to receive tailored recommendations.
""")

# Hard-coded API key
api_key = 'sk-uyma66a0c007ce2126318'

# Select the color of the house
house_color = st.color_picker('Select the color of your house', '#ff0000')

# Choose color scheme
scheme = st.radio('Choose a color scheme:', ['Similar', 'Complementary', 'Analogous'])

# Number of plants to display
num_plants = st.slider('Number of plants to display:', min_value=1, max_value=5, value=3)

# Additional questions
sun_level = st.selectbox('What is the sun exposure level?', ['Full Shade', 'Part Shade', 'A Mix of Sun and Shade', 'Full Sun'])
water_frequency = st.selectbox('How often do you water your plants?', ['Frequently', 'Average', 'Minimal'])
st.write('Note: If you have an automatic sprinkler system, select based on its settings.')
growth_rate = st.selectbox('Growth rate:', ['High', 'Moderate', 'Low'])

# New additional questions for more customized recommendations
more_details = st.radio('Would you like to share more details for a customized recommendation?', ['No','Yes'])

if more_details == 'Yes':
    propagation = st.selectbox('Propagation:', ['Seed', 'Stem', 'Layering', 'Division'])
    leaf_color = st.selectbox('Leaf Color:', ['Green', 'Purple', 'Burgundy'])
    maintenance = st.selectbox('Maintenance Level:', ['Low', 'Moderate', 'High'])
    drought_tolerant = st.selectbox('Drought Tolerant:', ['Yes', 'No'])
    salt_tolerant = st.selectbox('Salt Tolerant:', ['Yes', 'No'])
else:
    propagation = ''
    leaf_color = ''
    maintenance = ''
    drought_tolerant = ''
    salt_tolerant = ''

if st.button('Find Plants'):
    house_rgb = hex_to_rgb_tuple(house_color)
    color_hexes = []

    if scheme == 'Similar':
        color_hexes.append(house_color.lstrip('#'))
    elif scheme == 'Complementary':
        color_hexes.append(get_complementary_color(house_rgb).lstrip('#'))
    elif scheme == 'Analogous':
        color_hexes.extend([c.lstrip('#') for c in get_analogous_colors(house_rgb)])

    plant_data = []

    for color in color_hexes:
        data = get_plants_by_color(api_key, color, sun_level, water_frequency, growth_rate, propagation, leaf_color, maintenance, drought_tolerant, salt_tolerant)
        if 'data' in data:
            for plant in data['data']:
                plant_data.append({
                    'Common Name': plant.get('common_name', 'N/A'),
                    'Scientific Name': ', '.join(plant.get('scientific_name', [])),
                    'Watering': plant.get('watering', 'N/A'),
                    'Sunlight': ', '.join(plant.get('sunlight', [])),
                    'Image': plant.get('default_image', {}).get('regular_url', '') if plant.get('default_image') else ''
                })

    # Limit the number of plants displayed
    plant_data = plant_data[:num_plants]

    if plant_data:
        df = pd.DataFrame(plant_data)

        # Convert image URLs to HTML <img> tags
        def path_to_image_html(path):
            return f'<img src="{path}" width="60" >'

        df = df[['Common Name', 'Scientific Name', 'Watering', 'Sunlight', 'Image']]

        st.write(df.to_html(escape=False, formatters=dict(Image=path_to_image_html)), unsafe_allow_html=True)

        # Calculate the average number of letters in common names using numpy
        common_name_lengths = np.array([len(name) for name in df['Common Name']])
        average_length = np.mean(common_name_lengths)
        st.write(f"Average number of letters in common names: {average_length:.2f}")

    else:
        st.write(f"No plants found for the specified color scheme and criteria.")